<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Yanouk</title><link>http://localhost:1313/posts/</link><description>Recent content in Posts on Yanouk</description><image><title>Yanouk</title><url>http://localhost:1313/assets/toshiro.jpg</url><link>http://localhost:1313/assets/toshiro.jpg</link></image><generator>Hugo -- 0.147.8</generator><language>en-us</language><lastBuildDate>Mon, 23 Jun 2025 16:15:47 +0700</lastBuildDate><atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot Learning Path &amp; Core Concepts (Note-Taking Style)</title><link>http://localhost:1313/posts/learn_springboot/</link><pubDate>Mon, 23 Jun 2025 16:15:47 +0700</pubDate><guid>http://localhost:1313/posts/learn_springboot/</guid><description>&lt;h1 id="spring-boot-learning-path--core-concepts-note-taking-style">Spring Boot Learning Path &amp;amp; Core Concepts (Note-Taking Style)&lt;/h1>
&lt;p>This document outlines a structured learning path for Spring Boot, combined with essential core concepts presented in a concise, note-taking format.&lt;/p>
&lt;h2 id="i-spring-boot-learning-path">I. Spring Boot Learning Path&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Phase 1: Java Fundamentals (Prerequisite)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Core Java:&lt;/strong> OOP (Classes, Objects, Inheritance, Polymorphism, Abstraction, Encapsulation), Data Types, Control Flow, Collections, Exception Handling, I/O.&lt;/li>
&lt;li>&lt;strong>Build Tools:&lt;/strong> Basic understanding of Maven or Gradle (dependency management, build lifecycle).&lt;/li>
&lt;li>&lt;strong>Version Control:&lt;/strong> Git basics (commit, push, pull, branch).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Phase 2: Spring Framework Basics&lt;/strong>&lt;/p></description></item><item><title>Core Concepts &amp; Learning: A Note-Taking Approach</title><link>http://localhost:1313/posts/core_concepts_note_taking/</link><pubDate>Mon, 23 Jun 2025 16:14:33 +0700</pubDate><guid>http://localhost:1313/posts/core_concepts_note_taking/</guid><description>&lt;h1 id="core-concepts--learning-a-note-taking-approach">Core Concepts &amp;amp; Learning: A Note-Taking Approach&lt;/h1>
&lt;p>Learning effectively isn&amp;rsquo;t just about consuming information; it&amp;rsquo;s about understanding, retaining, and applying it. This guide outlines core learning concepts and note-taking strategies to enhance your study process.&lt;/p>
&lt;h2 id="i-understanding-core-concepts">I. Understanding Core Concepts&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>What is a &amp;ldquo;Core Concept&amp;rdquo;?&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Fundamental idea, principle, or building block of a subject.&lt;/li>
&lt;li>Without it, deeper understanding is difficult/impossible.&lt;/li>
&lt;li>Often abstract, but with concrete examples.&lt;/li>
&lt;li>Example: In programming, &amp;ldquo;variables&amp;rdquo; or &amp;ldquo;functions&amp;rdquo; are core concepts.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Why Focus on Core Concepts?&lt;/strong>&lt;/p></description></item><item><title>Understanding Java: Core Concepts, Database Connectivity, and Its Power</title><link>http://localhost:1313/posts/java_understanding/</link><pubDate>Mon, 23 Jun 2025 16:09:02 +0700</pubDate><guid>http://localhost:1313/posts/java_understanding/</guid><description>&lt;h1 id="understanding-java-core-concepts-database-connectivity-and-its-power">Understanding Java: Core Concepts, Database Connectivity, and Its Power&lt;/h1>
&lt;p>Java has been a cornerstone of software development for decades, known for its &amp;ldquo;Write Once, Run Anywhere&amp;rdquo; (WORA) principle. Its robustness, scalability, and extensive ecosystem make it a powerful choice for a wide range of applications, from enterprise-level systems to mobile apps and big data solutions.&lt;/p>
&lt;h2 id="core-java-concepts">Core Java Concepts&lt;/h2>
&lt;p>At its heart, Java is an &lt;strong>object-oriented programming (OOP)&lt;/strong> language. This paradigm emphasizes the use of objects, which are instances of classes, to structure code and model real-world entities.&lt;/p></description></item><item><title>Setup Tailwind React</title><link>http://localhost:1313/posts/setup-tailwind-react/</link><pubDate>Sat, 14 Jun 2025 20:26:46 +0700</pubDate><guid>http://localhost:1313/posts/setup-tailwind-react/</guid><description>&lt;h1 id="-modern-tailwind-css-configuration-with-react">🌀 Modern Tailwind CSS Configuration with React&lt;/h1>
&lt;p>Tailwind CSS is a utility-first CSS framework that has become a popular choice for styling React applications. In this guide, we’ll walk through the modern setup for using Tailwind with React in 2025 using tools like &lt;strong>Vite&lt;/strong> or &lt;strong>Create React App (CRA)&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h2 id="-prerequisites">🛠️ Prerequisites&lt;/h2>
&lt;p>Before we begin, make sure you have:&lt;/p>
&lt;ul>
&lt;li>Node.js (v18+ recommended)&lt;/li>
&lt;li>npm or yarn&lt;/li>
&lt;li>A React project set up with either Vite or CRA&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-option-1-setting-up-tailwind-with-vite-recommended">⚡ Option 1: Setting Up Tailwind with Vite (Recommended)&lt;/h2>
&lt;p>Vite is a fast build tool for modern React development.&lt;/p></description></item><item><title>Learning React</title><link>http://localhost:1313/posts/learning-react/</link><pubDate>Sat, 14 Jun 2025 20:23:58 +0700</pubDate><guid>http://localhost:1313/posts/learning-react/</guid><description>&lt;ul>
&lt;li>React.js is a JavaScript library for building &lt;strong>user interfaces&lt;/strong>.&lt;/li>
&lt;li>Developed by &lt;strong>Facebook&lt;/strong> (now Meta) in 2013.&lt;/li>
&lt;li>It is &lt;strong>component-based&lt;/strong>, &lt;strong>declarative&lt;/strong>, and allows for efficient UI updates.&lt;/li>
&lt;/ul>
&lt;h2 id="key-features-of-react">Key Features of React&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Component-Based Architecture&lt;/strong>: UI is built using reusable components.&lt;/li>
&lt;li>&lt;strong>Virtual DOM&lt;/strong>: Updates only the changed parts, making React fast.&lt;/li>
&lt;li>&lt;strong>Unidirectional Data Flow&lt;/strong>: Props and state maintain a predictable data structure.&lt;/li>
&lt;li>&lt;strong>JSX (JavaScript XML)&lt;/strong>: A syntax extension that lets you write HTML inside JavaScript.&lt;/li>
&lt;li>&lt;strong>Hooks&lt;/strong>: Allow functional components to have state and other features.&lt;/li>
&lt;/ul>
&lt;h2 id="mutable-vs-immutable">Mutable vs Immutable&lt;/h2>
&lt;h3 id="mutable-changeable">Mutable (Changeable)&lt;/h3>
&lt;ul>
&lt;li>Mutable data types &lt;strong>can be changed&lt;/strong> after creation.&lt;/li>
&lt;li>Example: &lt;strong>Objects &amp;amp; Arrays&lt;/strong> are mutable.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> arr &lt;span style="color:#ff79c6">=&lt;/span> [&lt;span style="color:#bd93f9">1&lt;/span>, &lt;span style="color:#bd93f9">2&lt;/span>, &lt;span style="color:#bd93f9">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr.push(&lt;span style="color:#bd93f9">4&lt;/span>); &lt;span style="color:#6272a4">// Modifies the original array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>console.log(arr); &lt;span style="color:#6272a4">// [1, 2, 3, 4]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="immutable-unchangeable">Immutable (Unchangeable)&lt;/h3>
&lt;ul>
&lt;li>Immutable data &lt;strong>cannot be changed&lt;/strong> directly. Instead, you create a new copy.&lt;/li>
&lt;li>Example: &lt;strong>Strings &amp;amp; Numbers&lt;/strong> are immutable.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> str &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>str[&lt;span style="color:#bd93f9">0&lt;/span>] &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;M&amp;#34;&lt;/span>; &lt;span style="color:#6272a4">// This won&amp;#39;t change the string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>console.log(str); &lt;span style="color:#6272a4">// &amp;#34;Hello&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example of immutable object handling (creating a new object instead of modifying the original):&lt;/p></description></item><item><title>The Feynman Technique</title><link>http://localhost:1313/posts/eightyandtwenty/</link><pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/eightyandtwenty/</guid><description>The Principle of Feynman Technique</description></item></channel></rss>